// Generated by CoffeeScript 1.4.0
(function() {
  var EventPlayback, EventRecorder, PageControl, control, ep, er;

  EventRecorder = (function() {

    function EventRecorder(options) {
      this.frames = [];
      this.recording = false;
    }

    EventRecorder.prototype.start = function() {
      this.recording = true;
      console.log('Starting to record events...');
      $(document).click(this.recordEvent.bind(this));
      return $(':input').change(this.recordEvent.bind(this));
    };

    EventRecorder.prototype.stop = function() {
      this.recording = false;
      return console.log('Stopping...');
    };

    EventRecorder.prototype.recordEvent = function(e) {
      var record, self;
      if (!this.recording) {
        return;
      }
      self = this;
      record = {
        url: document.location.href,
        type: e.type,
        target: self.getXPath(e.target),
        value: e.type === 'change' ? $(e.target).val() : null
      };
      this.frames.push(record);
      console.log(record);
      return chrome.extension.sendMessage({
        type: 'event',
        event: record
      });
    };

    EventRecorder.prototype.getElementByXPath = function(path) {
      var result;
      result = document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    };

    EventRecorder.prototype.getXPath = function(el) {
      var i, segs, sib;
      segs = [];
      while (el) {
        if (el.hasAttribute('id')) {
          segs.unshift("id(\"" + (el.getAttribute('id')) + "\")");
          return segs.join('/');
        } else if (el.hasAttribute('class')) {
          segs.unshift("" + (el.localName.toLowerCase()) + "[@class=\"" + (el.getAttribute('class')) + "\"]");
        } else {
          sib = el.previousSibling;
          i = 1;
          while (sib = sib.previousSibling) {
            if (sib.localName === el.localName) {
              i++;
            }
          }
          segs.unshift("" + (el.localName.toLowerCase()) + "[" + i + "]");
        }
        if (segs.length) {
          return "/" + (segs.join('/'));
        } else {
          return null;
        }
        el = el.parentNode;
      }
    };

    return EventRecorder;

  })();

  EventPlayback = (function() {

    function EventPlayback(record) {
      this.events = record.events;
      this.events.length = record.size;
    }

    EventPlayback.prototype.processURL = function(url) {
      return url.split(/[?#]/)[0];
    };

    EventPlayback.prototype.compareLocation = function(url1, url2) {
      if (url1 === url2) {
        return true;
      } else if ((this.processURL(url1)) === (this.processURL(url2))) {
        return true;
      } else {
        return false;
      }
    };

    EventPlayback.prototype.getElementByXPath = function(path) {
      var result;
      result = document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    };

    EventPlayback.prototype.playback = function() {
      var el, event, _i, _len, _ref;
      _ref = this.events;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        if (!this.compareLocation(event.url, document.location.href)) {
          continue;
        }
        console.log(event);
        switch (event.type) {
          case 'click':
            el = this.getElementByXPath(event.target);
            console.log('clicking');
            console.log(el);
            $(el).click();
            break;
          case 'change':
            el = this.getElementByXPath(event.target);
            console.log('changing');
            console.log(el);
            $(el).val(event.value);
        }
      }
      return null;
    };

    return EventPlayback;

  })();

  PageControl = (function() {

    function PageControl() {}

    PageControl.prototype.place = function(records) {
      var record, _i, _len, _results,
        _this = this;
      _results = [];
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        _results.push((function(record) {
          var close, _ref;
          console.log(record);
          $('body').append('\
          <div id=' + record.id + ' class="AA-record">\
            <div>\
              <button class="handle">◆</button>\
              <button class="playback">' + record.title + '</button>\
              <button class="dropdown">▾</button>\
            </div>\
            <ul>\
              <li><a class="rename">Rename</a></li>\
              <li><a class="edit">Edit</a></li>\
              <li><a class="delete">Delete</a></li>\
            </ul>\
            <input class="input" type="text" value="' + record.title + '" />\
        </div>');
          console.log(record.offset);
          if ((_ref = record.offset) == null) {
            record.offset = {
              top: 0,
              left: 0
            };
          }
          $("#" + record.id).offset(record.offset);
          $("#" + record.id + " .playback").button().click(function() {
            return chrome.extension.sendMessage({
              type: 'action',
              action: 'start-playback',
              id: record.id
            });
          }).next().button().click(function() {
            var menu;
            menu = $(this).parent().next();
            if (menu.is(':visible')) {
              return menu.hide();
            } else {
              return menu.show().position({
                my: 'left top',
                at: 'left bottom',
                of: this
              });
            }
          }).parent().buttonset().next().hide().menu();
          $("#" + record.id + " .edit").click(function() {
            return window.open("" + (chrome.extension.getURL('editor.html')) + "#" + record.id, '_newtab');
          });
          $("#" + record.id + " .delete").click(function() {
            $("#" + record.id).html('');
            return chrome.extension.sendMessage({
              type: 'action',
              action: 'delete',
              id: record.id
            });
          });
          $("#" + record.id + " .rename").click(function() {
            var input;
            input = $("#" + record.id + " .input");
            input.addClass('editing');
            input.position({
              my: 'left',
              at: 'left',
              of: this
            });
            return setTimeout((function() {
              return input.focus();
            }), 10);
          });
          close = function() {
            var input;
            input = $("#" + record.id + " .input");
            _this.updateRecord(record.id, {
              title: input.val()
            });
            input.removeClass('editing');
            return $("#" + record.id + " .playback .ui-button-text").html(input.val());
          };
          $("#" + record.id + " .input").blur(close);
          $("#" + record.id + " .input").keypress(function(e) {
            if (e.keyCode === 13) {
              return close();
            }
          });
          return $("#" + record.id).draggable({
            cancel: false,
            handle: '.handle',
            stop: function(event, ui) {
              console.log('drag stopped!');
              console.log(event);
              console.log(ui);
              return _this.updateRecord(record.id, {
                offset: ui.offset
              });
            }
          });
        })(record));
      }
      return _results;
    };

    PageControl.prototype.updateRecord = function(id, attr) {
      return chrome.extension.sendMessage({
        type: 'data',
        id: id,
        attr: attr
      });
    };

    PageControl.prototype.display = function(msg) {
      return $('.AA-msg').html("<h3>" + msg + "</h3>");
    };

    PageControl.prototype.clearDisplay = function() {
      return $('.AA-msg').html('');
    };

    return PageControl;

  })();

  $('body').append('<div class="AA-msg"></div>');

  er = null;

  ep = null;

  control = new PageControl;

  chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
    console.log('Got message from extension.');
    console.log(request);
    switch (request.action) {
      case 'start':
        console.log('Action is "start"');
        er = new EventRecorder;
        er.start();
        return control.display('Recording...');
      case 'stop':
        console.log('Action is "stop"');
        er.stop();
        return control.clearDisplay();
      case 'playback':
        console.log('Action is "playback"');
        ep = new EventPlayback(request.record);
        ep.playback();
        return control.display('Replaying...');
      case 'place':
        return console.log('Action is "place"');
    }
  });

  console.log('content-script loaded');

  chrome.extension.sendMessage({
    type: 'ping'
  }, function(response) {
    console.log('got response from control');
    console.log(response.records);
    return control.place(response.records);
  });

}).call(this);
