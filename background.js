// Generated by CoffeeScript 1.4.0
(function() {
  var Control, control;

  Control = (function() {

    function Control() {
      this.recording = false;
      this.replaying = false;
      this.events = [];
    }

    Control.prototype.start = function() {
      this.recording = true;
      return chrome.tabs.getSelected(null, function(tab) {
        return chrome.tabs.sendMessage(tab.id, {
          action: "start"
        }, function(response) {
          return null;
        });
      });
    };

    Control.prototype.stop = function() {
      this.recording = false;
      chrome.tabs.getSelected(null, function(tab) {
        return chrome.tabs.sendMessage(tab.id, {
          action: "stop"
        }, function(response) {
          return null;
        });
      });
      return this.save();
    };

    Control.prototype.save = function() {
      var model, record, url;
      if (this.events.length === 0) {
        return false;
      }
      url = this.processURL(this.events[0].url);
      record = {
        events: this.events,
        size: this.events.length,
        url: url
      };
      console.log('Saving record...');
      console.log(record);
      model = window.Database.create(record);
      this.addRecord(record.url, model.id);
      return this.events = [];
    };

    Control.prototype["delete"] = function(id) {
      var record;
      window.Database.fetch();
      record = window.Database.get(id);
      return record.destroy();
    };

    Control.prototype.addRecord = function(url, id) {
      var ids, key, val;
      key = "HT-" + url;
      val = localStorage[key] || "";
      ids = val.split(/[, ]+/);
      ids.push(id);
      return localStorage[key] = ids.join(', ');
    };

    Control.prototype.findRecords = function(url) {
      var id, ids, key, list, record, val, _i, _len, _ref;
      window.Database.fetch();
      key = "HT-" + url;
      val = localStorage[key] || "";
      list = [];
      ids = [];
      _ref = val.split(/[, ]+/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        if (!id) {
          continue;
        }
        console.log(id);
        record = window.Database.get(id);
        if (!record) {
          continue;
        }
        console.log(record);
        ids.push(id);
        list.push({
          id: id,
          title: record.attributes.title,
          offset: record.attributes.offset
        });
      }
      if (ids.length > 0) {
        localStorage[key] = ids.join(', ');
      }
      return list;
    };

    Control.prototype.processURL = function(url) {
      return url.split(/[?#]/)[0];
    };

    Control.prototype.compareLocation = function(url1, url2) {
      if (url1 === url2) {
        return true;
      } else if ((this.processURL(url1)) === (this.processURL(url2))) {
        return true;
      } else {
        return false;
      }
    };

    Control.prototype.chopRecord = function() {
      var event, first, page, rest, _base, _i, _len, _ref, _ref1;
      page = [];
      rest = [];
      first = null;
      if ((_ref = (_base = this.record).events) == null) {
        _base.events = this.record.attributes.events;
      }
      _ref1 = this.record.events;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        event = _ref1[_i];
        if (first == null) {
          first = event.url;
        }
        if (rest.length === 0) {
          if (this.compareLocation(first, event.url)) {
            page.push(event);
          } else {
            rest.push(event);
          }
        } else {
          rest.push(event);
        }
      }
      console.log(rest);
      this.record.events = rest;
      this.record.size = rest.length;
      if (this.record.size === 0) {
        this.replaying = false;
      }
      return {
        events: page,
        size: page.length
      };
    };

    Control.prototype.playback = function(id) {
      var record,
        _this = this;
      window.Database.fetch();
      if (id) {
        record = window.Database.get(id);
        console.log('playback..');
        console.log(record);
        this.replaying = true;
        this.record = record;
      } else {
        null;
      }
      console.log('Sending events...');
      return chrome.tabs.getSelected(null, function(tab) {
        return chrome.tabs.sendMessage(tab.id, {
          action: "playback",
          record: _this.chopRecord()
        }, function(response) {
          return null;
        });
      });
    };

    Control.prototype.updateRecord = function(id, attr) {
      var record;
      window.Database.fetch();
      record = window.Database.get(id);
      console.log(record);
      return record.save(attr);
    };

    Control.prototype.placeButton = function(tab, id, sendResponse) {
      return window.Database.fetch();
    };

    Control.prototype.addEvent = function(event) {
      return this.events.push(event);
    };

    return Control;

  })();

  control = new Control;

  chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
    var records;
    console.log(request);
    switch (request.type) {
      case 'event':
        if (control.recording) {
          return control.addEvent(request.event);
        }
        break;
      case 'action':
        switch (request.action) {
          case 'start':
            return control.start();
          case 'stop':
            return control.stop();
          case 'start-playback':
            return control.playback(request.id);
          case 'place':
            return control.placeButton(sender.tab, request.id, sendResponse);
          case 'delete':
            return control["delete"](request.id);
        }
        break;
      case 'data':
        return control.updateRecord(request.id, request.attr);
      case 'ping':
        if (control.recording) {
          return control.start();
        } else if (control.replaying) {
          return control.playback();
        } else {
          records = control.findRecords(control.processURL(sender.tab.url));
          console.log(sender);
          if (records.length !== 0) {
            console.log('sending back records');
            console.log(records);
            return sendResponse({
              records: records
            });
          }
        }
    }
  });

}).call(this);
